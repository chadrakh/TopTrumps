@model IEnumerable<TopTrumpsNovus.Models.Card>

@{
    ViewData["Title"] = "Index";
    int deckID = 1;
    List<Card> cardList = new List<Card>();
    List<Card> drawnCardsList = new List<Card>();
}

<div class="shapes">
    <ul class="circles">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>

    </ul>
</div>


<div class="container">

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
    </div>

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />

    </div>

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
    </div>


    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" class="backimage" />
    </div>
</div>


<div class="aicontainer">

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
    </div>

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />

    </div>

    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
    </div>


    <div class="card">
        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
    </div>
</div>

<div class="Game">

    @{
        foreach (var item in Model)
        {
            if ((item.DeckID) == deckID)
            {
                cardList.Add(item);
            }
        }

        ColumnNames cns = new ColumnNames();

        string[] columnNames = cns.getColumnNames(deckID);

        Random rng = new Random();
        cardList = cardList.OrderBy(a => rng.Next()).ToList();

        List<Card> playersCards = new List<Card>();
        List<Card> aisCards = new List<Card>();

        int halfOfDeck = (cardList.Count() / 2);

        for (int i = 0; i < halfOfDeck; i++)
        {
            playersCards.Add(cardList.ElementAt(i));
        }

        for (int i = halfOfDeck; i < cardList.Count() - 1; i++)
        {
            aisCards.Add(cardList.ElementAt(i));
        }


        <div class="info-card">
            <div class="player-card">
                <div class="player-card-inner">

                    <div class="player-card-front">
                        <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
                    </div>

                    <div class="player-card-back">
                        <br />
                        <div>

                            <p class="playerCard-title">
                                @Html.DisplayFor(modelItem => playersCards.ElementAt(0).CardName)
                            </p>
                        </div>
                        <img src=playersCards.ElementAt(0).ImageFilePath>
                        <div>
                            <p class="statOne">
                                @columnNames[0] <span class="playerStatOne-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatOne)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statOne')">SELECT</button>
                            </p>
                        </div>
                        <div>
                            <p class="statTwo">
                                @columnNames[1] <span class="playerStatTwo-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatTwo)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statTwo')">SELECT</button>
                            </p>
                        </div>
                        <div>
                            <p class="statThree">
                                @columnNames[2] <span class="playerStatThree-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatThree)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statThree')">SELECT</button>
                            </p>
                        </div>
                        <div>
                            <p class="statFour">
                                @columnNames[3] <span class="playerStatFour-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatFour)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statFour')">SELECT</button>
                            </p>
                        </div>
                        <div>
                            <p class="statFive">
                                @columnNames[4] <span class="playerStatFive-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatFive)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statFive')">SELECT</button>
                            </p>
                        </div>
                        <div>
                            <p class="statSix">
                                @columnNames[5] <span class="playerStatSix-value">@Html.DisplayFor(modelItem => playersCards.ElementAt(0).StatSix)</span>
                                <button type="button" class="selectStatBtn" onclick="handleStatSelected('statSix')">SELECT</button>
                            </p>
                        </div>




                        <br />
                    </div>

                </div>

            </div>


            <div class="info-card2">
                <div class="ai-card">
                    <div class="ai-card-inner">
                        <div class="ai-card-front">
                            <img src="~/Images/Toptrumps-logo.png" alt="Avatar" class="backimage" />
                        </div>

                        <div class="ai-card-back">
                            <br />
                            <div>
                                <p class="aiCard-title">
                                    @Html.DisplayFor(modelItem => aisCards.ElementAt(0).CardName)
                                </p>
                            </div>
                            <img src=aisCards.ElementAt(0).ImageFilePath>
                            <div>
                                <p class="aiCard-statOne">
                                    @columnNames[0] <span class="aiStatOne-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatOne)</span>
                                </p>
                            </div>
                            <div>
                                <p class="aiCard-statTwo">
                                    @columnNames[1] <span class="aiStatTwo-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatTwo)</span>
                                </p>
                            </div>
                            <div>
                                <p class="aiCard-statThree">
                                    @columnNames[2] <span class="aiStatThree-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatThree)</span>
                                </p>
                            </div>
                            <div>
                                <p class="aiCard-statFour">
                                    @columnNames[3] <span class="aiStatFour-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatFour)</span>
                                </p>
                            </div>
                            <div>
                                <p class="aiCard-statFive">
                                    @columnNames[4] <span class="aiStatFive-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatFive)</span>
                                </p>
                            </div>
                            <div>
                                <p class="aiCard-statSix">
                                    @columnNames[5] <span class="aiStatSix-value">@Html.DisplayFor(modelItem => aisCards.ElementAt(0).StatSix)</span>
                                </p>
                            </div>
                            <br />
                        </div>

                    </div>
                </div>
            </div>

        </div>
    }
</div>

<script type="text/javascript">
    const playersCardsArr = @Html.Raw(Json.Serialize(playersCards));
    const aisCardsArr = @Html.Raw(Json.Serialize(aisCards));

    const handleStatSelected = (statRef) => {
        console.log(playersCardsArr, aisCardsArr);

        const elementValue = document.querySelector(`.${statRef}`).innerText;
        const statHeader = elementValue.split` `[0];
        const playerStatValue = elementValue.split` `[1];

        let aiStatValue = getAiStat(statRef, playerStatValue);
        compareStats(playerStatValue, aiStatValue);

        document.querySelector(".outcomeText").innerText = "Computer's turn";
        setTimeout(playAiTurn, 3000);
    }

    const playAiTurn = () => {
        const random = Math.floor(Math.random() * 6) + 1;
        let stat;

        switch (random) {
            case (1):
                stat = "One"
                break;
            case (2):
                stat = "Two"
                break;
            case (3):
                stat = "Three"
                break;
            case (4):
                stat = "Four"
                break;
            case (5):
                stat = "Five"
                break;
            case (6):
                stat = "Six"
                break;
            default:
                stat = "One";
                break;
        }

        let aiStat = parseInt(document.querySelector(`.aiStat${stat}-value`).innerText);
        let playerStat = parseInt(getPlayerStat(stat));

        document.querySelector(".outcomeText").innerText = "Player's turn";
        compareStats(playerStat, aiStat);
    }

    const getPlayerStat = (statNum) => {
        const playerStatValue = document.querySelector(`.playerStat${statNum}-value`).innerText;

        return playerStatValue;
    }

    const getAiStat = (statRef, playerStatValue) => {
        const elementValue = document.querySelector(`.aiCard-${statRef}`).innerText;
        const aiStatValue = elementValue.split` `[1];

        return aiStatValue;
    }

    let roundCount = 0;
    let playerWins = 0;
    let aiWins = 0;

    const compareStats = (playerStatValue, aiStatValue) => {
        const title = `Round ${roundCount}`;

        roundCount++;

        if (playerStatValue > aiStatValue) {
            alert(`Player wins Round ${roundCount}!`);
            playerWins++;
            document.querySelector(".playerWinCount").innerText = `Player Wins: ${playerWins}`;
            updatePlayerCard();

        } else if (aiStatValue > playerStatValue) {
            alert(`Computer wins Round ${roundCount}!`);
            aiWins++;
            document.querySelector(".aiWinCount").innerText = `Computer Wins: ${aiWins}`;
            updateAiCard();

        } else {
            alert(`Round ${roundCount}: it's a tie!`);
            updatePlayerCard();
            updateAiCard();
        }
    }

    const updatePlayerCard = () => {
        const indexToRemove = playersCardsArr.indexOf(playersCardsArr[0]);
        playersCardsArr.splice(indexToRemove, 1);

        if (playersCardsArr.length == 0) {
            displayOutcome();
        } else {
            const newTitle = playersCardsArr[0].cardName;
            const newStatOne = playersCardsArr[0].statOne;
            const newStatTwo = playersCardsArr[0].statTwo;
            const newStatThree = playersCardsArr[0].statThree;
            const newStatFour = playersCardsArr[0].statFour;
            const newStatFive = playersCardsArr[0].statFive;
            const newStatSix = playersCardsArr[0].statSix;

            document.querySelector(".playerCard-title").innerText = newTitle;
            document.querySelector(".playerStatOne-value").innerText = newStatOne;
            document.querySelector(".playerStatTwo-value").innerText = newStatTwo;
            document.querySelector(".playerStatThree-value").innerText = newStatThree;
            document.querySelector(".playerStatFour-value").innerText = newStatFour;
            document.querySelector(".playerStatFive-value").innerText = newStatFive;
            document.querySelector(".playerStatSix-value").innerText = newStatSix;
        }
    }

    const updateAiCard = () => {
        const indexToRemove = aisCardsArr.indexOf(aisCardsArr[0]);
        aisCardsArr.splice(indexToRemove, 1);

        if (aisCardsArr.length == 0) {
            displayOutcome();
        } else {
            const newTitle = aisCardsArr[0].cardName;
            const newStatOne = aisCardsArr[0].statOne;
            const newStatTwo = aisCardsArr[0].statTwo;
            const newStatThree = aisCardsArr[0].statThree;
            const newStatFour = aisCardsArr[0].statFour;
            const newStatFive = aisCardsArr[0].statFive;
            const newStatSix = aisCardsArr[0].statSix;

            document.querySelector(".aiCard-title").innerText = newTitle;
            document.querySelector(".aiStatOne-value").innerText = newStatOne;
            document.querySelector(".aiStatTwo-value").innerText = newStatTwo;
            document.querySelector(".aiStatThree-value").innerText = newStatThree;
            document.querySelector(".aiStatFour-value").innerText = newStatFour;
            document.querySelector(".aiStatFive-value").innerText = newStatFive;
            document.querySelector(".aiStatSix-value").innerText = newStatSix;
        }
    }

    const displayOutcome = () => {
        if (playerWins > aiWins) {
            alert(`Game Over! Player had ${playerWins} wins!`);
        } else if (aiWins > playerWins) {
            alert(`Game Over! Computer ${aiWins} wins!`)
        } else {
            alert(`Game Over! It's a tie! Both sides had ${playerWins} wins.`);
        }
    }
</script>
